       DEF  TSTLST,RSLTFL
       REF  AEQ,ABLCK
*
       REF  BUFINT,BUFCPY,BUFALC,BUFREE
       REF  BUFLES
*
       REF  BUFADR,BUFEND

TSTLST DATA TSTEND-TSTLST-2/8
* Copy memory block. Non-overlapping.
       DATA TCPY1
       TEXT 'TCPY1 '
* Copy memory block. Length is zero.
       DATA TCPY2
       TEXT 'TCPY2 '
* Copy memory block. Overlapping.
       DATA TCPY3
       TEXT 'TCPY3 '
* Copy memory block. Overlapping.
       DATA TCPY4
       TEXT 'TCPY4 '
* Initialize a >1000 bytes buffer.
       DATA TINT1
       TEXT 'TINT1 '
* Fail to initialize with >8000 bytes.
       DATA TINT2
       TEXT 'TINT2 '
* Fail to initialize with >2 bytes.
       DATA TINT3
       TEXT 'TINT3 '
* Fail to initialize with >13 bytes.
       DATA TINT4
       TEXT 'TINT4 '
* Allocate space in empty buffer.
       DATA TALC1
       TEXT 'TALC1 '
* Allocate space following another
*    allocation.
       DATA TALC2
       TEXT 'TALC2 '
* Allocate space between two allocated
*    spaces.
       DATA TALC3
       TEXT 'TALC3 '
* Allocate space between two allocated
*    spaces, leave some unallocated
*    remaining.
       DATA TALC4
       TEXT 'TALC4 '
* Allocate space.
*    Earlier empty space too small.
*       DATA TALC5
*       TEXT 'TALC5 '
* Allocate last remaining space in buffer.
*       DATA TALC6
*       TEXT 'TALC6 '
* No unallocated space is large enough.
*       DATA TALC7
*       TEXT 'TALC7 '

* Deallocate only allocated space
* Deallocate last of several allocated
*    spaces
* Deallocate space at end of buffer
* Deallocate space between two allocated
*    spaces
* Deallocate space after allocated but
*    before deallocated space
TSTEND
RSLTFL BYTE RSLTFE-RSLTFL-1
       TEXT 'DSK2.TESTRESULT.TXT'
RSLTFE
       EVEN
*
SPACE  BSS  >400

*
* Copy memory block. Non-overlapping.
TCPY1
* Act
       LI   R0,TCPY1A
       LI   R1,TCPY1C
       LI   R2,TCPY1B-TCPY1A
       BLWP @BUFCPY
* Assert the data was copied correctly.
       LI   R0,TCPY1A
       LI   R1,TCPY1C
       LI   R2,TCPY1B-TCPY1A
       LI   R3,TCPY1D
       LI   R4,TCPY1E-TCPY1D
       BLWP @ABLCK
*
       RT
TCPY1A TEXT 'Some data to copy.'
TCPY1B EVEN
       BSS  >10
TCPY1C BSS  >20
TCPY1D TEXT 'Copied string should match original.'
TCPY1E EVEN

*
* Copy memory block. Length is zero.
TCPY2
* Act
       LI   R0,TCPY2A
       LI   R1,TCPY2C
       LI   R2,0
       BLWP @BUFCPY
* No real assertion.
* If this test fails, it will probably
* mean an infinate loop.
       RT
TCPY2A BSS  >2
TCPY2C BSS  >2

*
* Copy memory block. Overlapping.
* Source block is earlier than
* destination block.
TCPY3
* Act
       LI   R0,TCPY3B
       LI   R1,TCPY3D
       LI   R2,TCPY3C-TCPY3B
       BLWP @BUFCPY
* Assert
       LI   R0,TCPY3A
       LI   R1,TCPY3D
       LI   R2,TCPY3B-TCPY3A
       LI   R3,TCPY1D
       LI   R4,TCPY1E-TCPY1D
       BLWP @ABLCK
*
       RT
* Expected text
TCPY3A TEXT 'This is some data that may be copied._'
       EVEN
* Source to copy from
TCPY3B TEXT 'This is some data that may be copied._'
       EVEN
TCPY3C BSS  >20
TCPY3D EQU  TCPY3B+>8

*
* Copy memory block. Overlapping.
* Source block is later than
* destination block.
TCPY4
* Act
       LI   R0,TCPY4C
       LI   R1,TCPY4E
       LI   R2,TCPY4D-TCPY4C
       BLWP @BUFCPY
* Assert
       LI   R0,TCPY4A
       LI   R1,TCPY4E
       LI   R2,TCPY4B-TCPY4A
       LI   R3,TCPY1D
       LI   R4,TCPY1E-TCPY1D
       BLWP @ABLCK
*
       RT
* Expected text
TCPY4A TEXT 'This is some data that may be copied._'
TCPY4B EVEN
       BSS  >20
* Source to copy from
TCPY4C TEXT 'This is some data that may be copied._'
TCPY4D
TCPY4E EQU  TCPY4C->8
       EVEN

*
* Initialize a >1000 bytes buffer.
* Expect the first word to contain the
* header for one empty chunk covering
* the entire buffer.
TINT1
* Act
       LI   R0,SPACE
       LI   R1,>200
       BLWP @BUFINT
* Assert R0 = zero (no error)
       MOV  R0,R1
       CLR  R0
       LI   R2,TINT1A
       LI   R3,TINT1B-TINT1A
       BLWP @AEQ
* Assert R0 = zero (no error)
       LI   R0,>200
       LI   R1,SPACE
       MOV  *R1,R1
       LI   R2,TINT1B
       LI   R3,TINT1C-TINT1B
       BLWP @AEQ       
*
       RT
TINT1A TEXT 'There should be no allocation error.'
TINT1B TEXT 'The first word should contain >1000.'
TINT1C EVEN
 
*
* Fail to initialize with >8000 bytes.
* Expect the allocation to fail because
* >8000 is too big.
TINT2
* Act
       LI   R0,SPACE
       LI   R1,>8000
       BLWP @BUFINT
* Assert R0 = >FFFF (error)
       MOV  R0,R1
       SETO R0
       LI   R2,TINT2A
       LI   R3,TINT2B-TINT2A
       BLWP @AEQ
*
       RT
TINT2A TEXT 'Allocation should fail. '
       TEXT '>8000 is too big.'
TINT2B EVEN

*
* Fail to initialize with >2 bytes.
* Expect the allocation to fail because
* >0002 is too small.
TINT3
* Act
       LI   R0,SPACE
       LI   R1,>2
       BLWP @BUFINT
* Assert R0 = >FFFF (error)
       MOV  R0,R1
       SETO R0
       LI   R2,TINT3A
       LI   R3,TINT3B-TINT3A
       BLWP @AEQ
*
       RT
TINT3A TEXT 'Allocation should fail. '
       TEXT '>3 is too small.'
TINT3B EVEN

*
* Fail to initialize with >13 bytes.
* Expect the allocation to fail because
* space must be even.
TINT4
* Act
       LI   R0,SPACE
       LI   R1,>13
       BLWP @BUFINT
* Assert R0 = >FFFF (error)
       MOV  R0,R1
       SETO R0
       LI   R2,TINT4A
       LI   R3,TINT4B-TINT4A
       BLWP @AEQ
*
       RT
TINT4A TEXT 'Allocation should fail. '
       TEXT 'Allocated space must be even.'
TINT4B EVEN

* Allocate space in empty buffer.
TALC1
* Arrange
       LI   R0,TALC1A
       MOV  R0,@BUFADR
       LI   R0,TALC1B
       MOV  R0,@BUFEND
* Act
       LI   R0,>E
       BLWP @BUFALC
* Assert
* >10 bytes should be allocated
* (>E bytes + header)
       LI   R0,>8010
       MOV  @TALC1A,R1
       LI   R2,TALC1B
       LI   R3,TALC1C-TALC1B
       BLWP @AEQ
* >30 bytes remain unallocated
       LI   R0,>0030
       LI   R1,TALC1A+>10
       MOV  *R1,R1
       LI   R2,TALC1C
       LI   R3,TALC1D-TALC1C
       BLWP @AEQ
*
       RT
* Starting buffer
TALC1A
* Header
       DATA >0040
* Allocated space
       BSS  >3E
TALC1B TEXT 'Space should have been allocated.'
TALC1C TEXT 'Some space should remain unallocated.'
TALC1D EVEN

* Allocate space following another
*    allocation.
TALC2
* Arrange
       LI   R0,TALC2A
       MOV  R0,@BUFADR
       LI   R0,TALC2B
       MOV  R0,@BUFEND
* Act
       LI   R0,>C
       BLWP @BUFALC
* Assert
*
       LI   R0,>8008
	   LI   R1,TALC2A
       MOV  *R1,R1
       LI   R2,TALC2B
       LI   R3,TALC2C-TALC2B
       BLWP @AEQ
*
       LI   R0,>8018
	   LI   R1,TALC2A+>8
       MOV  *R1,R1
       LI   R2,TALC2B
       LI   R3,TALC2C-TALC2B
       BLWP @AEQ
* >E bytes should be allocated
* (>C bytes + header)
       LI   R0,>800E
	   LI   R1,TALC2A+>20
       MOV  *R1,R1
       LI   R2,TALC2C
       LI   R3,TALC2D-TALC2C
       BLWP @AEQ
* >12 bytes remain unallocated
       LI   R0,>0012
       LI   R1,TALC2A+>2E
       MOV  *R1,R1
       LI   R2,TALC2D
       LI   R3,TALC2E-TALC2D
       BLWP @AEQ
*
       RT
* Starting buffer
TALC2A DATA >8008
	   BSS  >06
       DATA >8018
	   BSS  >16
	   DATA >0020
       BSS  >1E
TALC2B TEXT 'Space should remain allocated.'
TALC2C TEXT 'Space should be newly allocated.'
TALC2D TEXT 'Some space should remain unallocated.'
TALC2E EVEN

* Allocate space between two allocated
*    spaces.
TALC3
* Arrange
       LI   R0,TALC3A
       MOV  R0,@BUFADR
       LI   R0,TALC3B
       MOV  R0,@BUFEND
* Act
       LI   R0,>16
       BLWP @BUFALC
* Assert
*
       LI   R0,>8008
	   LI   R1,TALC3A
       MOV  *R1,R1
       LI   R2,TALC3B
       LI   R3,TALC3C-TALC3B
       BLWP @AEQ
*
       LI   R0,>8010
	   LI   R1,TALC3A+>20
       MOV  *R1,R1
       LI   R2,TALC3B
       LI   R3,TALC3C-TALC3B
       BLWP @AEQ
* >18 bytes should be allocated
* (>16 bytes + header)
       LI   R0,>8018
	   LI   R1,TALC3A+>08
       MOV  *R1,R1
       LI   R2,TALC3C
       LI   R3,TALC3D-TALC3C
       BLWP @AEQ
* >10 bytes remain unallocated
       LI   R0,>0010
       LI   R1,TALC3A+>30
       MOV  *R1,R1
       LI   R2,TALC3D
       LI   R3,TALC3E-TALC3D
       BLWP @AEQ
*
       RT
* Starting buffer
TALC3A DATA >8008
       BSS  >06
       DATA >0018
       BSS  >16
       DATA >8010
	   BSS  >0E
	   DATA >0010
	   BSS  >0E
TALC3B TEXT 'Space should remain allocated.'
TALC3C TEXT 'Space should be newly allocated.'
TALC3D TEXT 'Space should remain unallocated.'
TALC3E EVEN

* Allocate space between two allocated
*    spaces, leave some unallocated
*    remaining.
TALC4
* Arrange
       LI   R0,TALC4A
       MOV  R0,@BUFADR
       LI   R0,TALC4B
       MOV  R0,@BUFEND
* Act
       LI   R0,>14
       BLWP @BUFALC
* Assert
       CLR  R3
* >08 bytes remain allocated
       LI   R0,>8008
       MOV  @TALC4A,R1
       BLWP @AEQ
	   TEXT 'Space should remain allocated.'
	   BYTE 0
       EVEN
* >16 bytes should be allocated
* (>14 bytes + header)
       LI   R0,>8016
       MOV  @TALC4A+>08,R1
       BLWP @AEQ
	   TEXT 'Space should now be allocated.'
	   BYTE 0
       EVEN
* >02 bytes remain unallocated
       LI   R0,>0002
       MOV  @TALC4A+>1E,R1
       BLWP @AEQ
	   TEXT 'Space should remain unallocated.'
	   BYTE 0
	   EVEN
* >10 bytes remain allocated
       LI   R0,>8010
       MOV  @TALC4A+>20,R1
       BLWP @AEQ
	   TEXT 'Space should remain allocated.'
	   BYTE 0
       EVEN
* >10 bytes remain unallocated
       LI   R0,>0010
       MOV  @TALC4A+>30,R1
       BLWP @AEQ
	   TEXT 'Space should remain unallocated.'
	   BYTE 0
	   EVEN
*
       RT
* Starting buffer
TALC4A DATA >8008
       BSS  >06
       DATA >0018
       BSS  >16
       DATA >8010
	   BSS  >0E
	   DATA >0010
	   BSS  >0E
TALC4B

       END